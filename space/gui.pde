/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void dibujar(GButton source, GEvent event) { //_CODE_:btndr:906999:
 
 int i = star1.getSelectedIndex();
 int n = star2.getSelectedIndex();
   boolean g = false,exist=false;
    String p=null;
   
   if(i!=n){//diferentes #1
   Estrella a = estrellas.get(i);
   Estrella b = estrellas.get(n);
   
   if(!(a.aristas.isEmpty())){//primero ver que no esté vacía
   for(Arista k: a.aristas){
     if(k.i==a && k.f==b){
      exist=true;
      break;
     }
   }
     for(Arista w: b.aristas){
       if(w.i==b && w.f==a){
          exist=true;
          break;
       }
     }
    
   }else{
   print("ta vacio");
   }
  
   
     if(exist==false){
       while(!g){
       p = JOptionPane.showInputDialog(null,"Digite la distancia en años luz.");
       if(p!=null && p!=""){
         g=true;
       }else{
       JOptionPane.showMessageDialog(null,"Por favor, digite un valor válido");
       }
       }
       try{
       int peso = Integer.parseInt(p);
       if(peso>0){
       a.aristas.add(new Arista(a,b,peso));
       b.aristas.add(new Arista(b,a,peso));
       aristas.add(new Arista(a,b,peso));
       }else{
       JOptionPane.showMessageDialog(null,"Por favor, digite un valor válido");
       }
       }catch(Exception e){
        JOptionPane.showMessageDialog(null,"Por favor, digite un valor válido");
       }
     }else{
     JOptionPane.showMessageDialog(null,"Esta relación ya existe.");
     }
   
   
   }else{
    JOptionPane.showMessageDialog(null,"Debe seleccionar Nodos diferentes.");
   }
  
} //_CODE_:btndr:906999:

public void list1(GDropList source, GEvent event) { //_CODE_:star1:304429:

  println("star1 - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:star1:304429:

public void list2(GDropList source, GEvent event) { //_CODE_:star2:594256:
  println("star2 - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:star2:594256:

public void warshall(GButton source, GEvent event) { //_CODE_:floyd:856741:
  int i = star1.getSelectedIndex();
 int n = star2.getSelectedIndex();
 if(i!=n){
  floydWar(i,n);
 }else{
 JOptionPane.showMessageDialog(null,"Debe seleccionar dos estrellas que existan y sean diferentes.");
 }
 
} //_CODE_:floyd:856741:

public void limpiar(GButton source, GEvent event) { //_CODE_:clean:305640:
  reiniciar();
} //_CODE_:clean:305640:

public void eliminar(GButton source, GEvent event) { //_CODE_:elim:607671:
  String nombre = JOptionPane.showInputDialog(null,"Ingrese el nombre de la estrella que desea eliminar");
 boolean enc=false;
 int pos=0;
 ArrayList posi = new ArrayList();
 if(nombre!=null && nombre!=""){
 for(Estrella a: estrellas){
    if(a.name.equals(nombre)){
        enc=true;
      for(Arista b: aristas){
        if(b.i==a || b.f==a){
          posi.add(b);
        }
      }
      pos = estrellas.indexOf(a);
      break;
    }
  }
  if(!enc){
   JOptionPane.showMessageDialog(null,"No se encontró la estrella "+nombre);
 }else{
   estrellas.remove(pos);
  for(Object o: posi){
    aristas.remove(o);
  }
  star1.removeItem(pos);
  star2.removeItem(pos);
  nombres.remove(pos);
   if(!(aristasr.isEmpty())){
     aristasr.clear();
   }
 }
 }else{
  JOptionPane.showMessageDialog(null,"Por favor, digite un nombre de estrella a eliminar.");
 }
  
  
 
} //_CODE_:elim:607671:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Space");
  btndr = new GButton(this, 300, 8, 99, 26);
  btndr.setText("Dibujar Camino");
  btndr.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  btndr.addEventHandler(this, "dibujar");
  star1 = new GDropList(this, 20, 8, 110, 253, 10);
  star1.setItems(loadStrings("list_304429"), 0);
  star1.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  star1.addEventHandler(this, "list1");
  star2 = new GDropList(this, 177, 8, 112, 253, 10);
  star2.setItems(loadStrings("list_594256"), 0);
  star2.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  star2.addEventHandler(this, "list2");
  label1 = new GLabel(this, 140, 8, 29, 23);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("y");
  label1.setTextBold();
  label1.setLocalColorScheme(GCScheme.SCHEME_15);
  label1.setOpaque(false);
  floyd = new GButton(this, 508, 8, 117, 25);
  floyd.setText("Camino mínimo");
  floyd.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  floyd.addEventHandler(this, "warshall");
  clean = new GButton(this, 635, 8, 83, 25);
  clean.setText("Reiniciar");
  clean.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  clean.addEventHandler(this, "limpiar");
  elim = new GButton(this, 408, 9, 94, 25);
  elim.setText("Eliminar estrella");
  elim.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  elim.addEventHandler(this, "eliminar");
}

// Variable declarations 
// autogenerated do not edit
GButton btndr; 
GDropList star1; 
GDropList star2; 
GLabel label1; 
GButton floyd; 
GButton clean; 
GButton elim; 